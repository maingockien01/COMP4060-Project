syntax = "proto3";
package maingockien01.simple_oracle.simpleoracle;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "simpleoracle/params.proto";
import "simpleoracle/resource.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/maingockien01/simple_oracle/x/simpleoracle/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/maingockien01/simple_oracle/simpleoracle/params";
  }
  // Queries a Resource by index.
	rpc Resource(QueryGetResourceRequest) returns (QueryGetResourceResponse) {
		option (google.api.http).get = "/maingockien01/simple_oracle/simpleoracle/resource/{index}";
	}

	// Queries a list of Resource items.
	rpc ResourceAll(QueryAllResourceRequest) returns (QueryAllResourceResponse) {
		option (google.api.http).get = "/maingockien01/simple_oracle/simpleoracle/resource";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetResourceRequest {
	  string index = 1;

}

message QueryGetResourceResponse {
	Resource resource = 1 [(gogoproto.nullable) = false];
}

message QueryAllResourceRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllResourceResponse {
	repeated Resource resource = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
